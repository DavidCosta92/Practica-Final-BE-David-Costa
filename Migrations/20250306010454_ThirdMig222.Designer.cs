// <auto-generated />
using System;
using FinalProjectBakary.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinalProjectBakary.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250306010454_ThirdMig222")]
    partial class ThirdMig222
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BreadMenu", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<int>("_availableBreadsId")
                        .HasColumnType("integer");

                    b.HasKey("MenuId", "_availableBreadsId");

                    b.HasIndex("_availableBreadsId");

                    b.ToTable("MenuBreads", (string)null);
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Breads.Bread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Breads");

                    b.HasDiscriminator().HasValue("Bread");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId")
                        .IsUnique();

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaximumCapacity")
                        .HasColumnType("integer");

                    b.Property<int?>("MenuId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("reservedUnits")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FinishedOfficeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PendingOfficeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FinishedOfficeId");

                    b.HasIndex("PendingOfficeId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("FinalProjectBakary.Persistence.Entities.OrderBread", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("BreadId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "BreadId");

                    b.HasIndex("BreadId");

                    b.ToTable("OrderBread");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Breads.Baguette", b =>
                {
                    b.HasBaseType("FinalProjectBakary.Domain.Entities.Breads.Bread");

                    b.HasDiscriminator().HasValue("Baguette");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Breads.HamburgerBun", b =>
                {
                    b.HasBaseType("FinalProjectBakary.Domain.Entities.Breads.Bread");

                    b.HasDiscriminator().HasValue("HamburgerBun");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Breads.MilkBread", b =>
                {
                    b.HasBaseType("FinalProjectBakary.Domain.Entities.Breads.Bread");

                    b.HasDiscriminator().HasValue("MilkBread");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Breads.WhiteBread", b =>
                {
                    b.HasBaseType("FinalProjectBakary.Domain.Entities.Breads.Bread");

                    b.HasDiscriminator().HasValue("WhiteBread");
                });

            modelBuilder.Entity("BreadMenu", b =>
                {
                    b.HasOne("FinalProjectBakary.Domain.Entities.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProjectBakary.Domain.Entities.Breads.Bread", null)
                        .WithMany()
                        .HasForeignKey("_availableBreadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Breads.Bread", b =>
                {
                    b.OwnsOne("FinalProjectBakary.Domain.Common.AuditInfo", "Audit", b1 =>
                        {
                            b1.Property<int>("BreadId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("BreadId");

                            b1.ToTable("Breads");

                            b1.WithOwner()
                                .HasForeignKey("BreadId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Menu", b =>
                {
                    b.HasOne("FinalProjectBakary.Domain.Entities.Office", "Office")
                        .WithOne("Menu")
                        .HasForeignKey("FinalProjectBakary.Domain.Entities.Menu", "OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FinalProjectBakary.Domain.Common.AuditInfo", "Audit", b1 =>
                        {
                            b1.Property<int>("MenuId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menus");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");
                        });

                    b.Navigation("Audit");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Office", b =>
                {
                    b.OwnsOne("FinalProjectBakary.Domain.Common.AuditInfo", "Audit", b1 =>
                        {
                            b1.Property<int>("OfficeId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("OfficeId");

                            b1.ToTable("Offices");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Order", b =>
                {
                    b.HasOne("FinalProjectBakary.Domain.Entities.Office", "FinishedOffice")
                        .WithMany("FinishedOrderList")
                        .HasForeignKey("FinishedOfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProjectBakary.Domain.Entities.Office", "PendingOffice")
                        .WithMany("OrderQueue")
                        .HasForeignKey("PendingOfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("FinalProjectBakary.Domain.Common.AuditInfo", "Audit", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("OrderId");

                            b1.ToTable("Order");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Audit");

                    b.Navigation("FinishedOffice");

                    b.Navigation("PendingOffice");
                });

            modelBuilder.Entity("FinalProjectBakary.Persistence.Entities.OrderBread", b =>
                {
                    b.HasOne("FinalProjectBakary.Domain.Entities.Breads.Bread", "Bread")
                        .WithMany()
                        .HasForeignKey("BreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProjectBakary.Domain.Entities.Order", "Order")
                        .WithMany("OrderBreads")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bread");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Office", b =>
                {
                    b.Navigation("FinishedOrderList");

                    b.Navigation("Menu");

                    b.Navigation("OrderQueue");
                });

            modelBuilder.Entity("FinalProjectBakary.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderBreads");
                });
#pragma warning restore 612, 618
        }
    }
}
